#ifndef TELEMETRY-DATA_READER_H
#define TELEMETRY-DATA_READER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

typedef struct TSData TSData_t;
typedef const TSData_t *TSData_struct_t;
typedef TSData_t *TSData_mutable_struct_t;
typedef const TSData_t *TSData_vec_t;
typedef TSData_t *TSData_mutable_vec_t;

#ifndef TSData_file_identifier
#define TSData_file_identifier 0
#endif
/* deprecated, use TSData_file_identifier */
#ifndef TSData_identifier
#define TSData_identifier 0
#endif
#define TSData_type_hash ((flatbuffers_thash_t)0x32a6c8f8)
#define TSData_type_identifier "\xf8\xc8\xa6\x32"
#ifndef TSData_file_extension
#define TSData_file_extension "bin"
#endif

typedef int8_t FuelCellMode_enum_t;
__flatbuffers_define_integer_type(FuelCellMode, FuelCellMode_enum_t, 8)
#define FuelCellMode_noneSelected ((FuelCellMode_enum_t)INT8_C(0))
#define FuelCellMode_off ((FuelCellMode_enum_t)INT8_C(1))
#define FuelCellMode_prepareToRace ((FuelCellMode_enum_t)INT8_C(2))
#define FuelCellMode_race ((FuelCellMode_enum_t)INT8_C(3))

static inline const char *FuelCellMode_name(FuelCellMode_enum_t value)
{
    switch (value) {
    case FuelCellMode_noneSelected: return "noneSelected";
    case FuelCellMode_off: return "off";
    case FuelCellMode_prepareToRace: return "prepareToRace";
    case FuelCellMode_race: return "race";
    default: return "";
    }
}

static inline int FuelCellMode_is_known_value(FuelCellMode_enum_t value)
{
    switch (value) {
    case FuelCellMode_noneSelected: return 1;
    case FuelCellMode_off: return 1;
    case FuelCellMode_prepareToRace: return 1;
    case FuelCellMode_race: return 1;
    default: return 0;
    }
}


struct TSData {
    alignas(4) flatbuffers_bool_t isEmergency;
    alignas(1) flatbuffers_bool_t isEmergencyButtonPressed;
    alignas(1) flatbuffers_bool_t isEmergencySwitchToggled;
    alignas(1) flatbuffers_bool_t isHydrogenLeaking;
    alignas(1) flatbuffers_bool_t isScRelayClosed;
    alignas(1) flatbuffers_bool_t isTimeResetButtonPressed;
    alignas(1) flatbuffers_bool_t isHalfSpeedButtonPressed;
    alignas(1) flatbuffers_bool_t isGasButtonPressed;
    alignas(1) FuelCellMode_enum_t fuelCellMode;
    alignas(4) float fcCurrent;
    alignas(4) float fcScCurrent;
    alignas(4) float scMotorCurrent;
    alignas(4) float fcVoltage;
    alignas(4) float scVoltage;
    alignas(4) float hydrogenSensorVoltage;
    alignas(4) float fuelCellTemperature;
    alignas(4) int32_t fanRpm;
    alignas(4) float vehicleSpeed;
    alignas(4) int32_t motorPwm;
    alignas(4) float hydrogenPressure;
    alignas(4) float gpsLatitude;
    alignas(4) float gpsLongitude;
    alignas(4) float gpsAltitude;
    alignas(4) float gpsSpeed;
    alignas(4) float motorSpeed;
    alignas(4) float motorCurrent;
    alignas(4) float fcCurrentRaw;
    alignas(4) float fcVoltageRaw;
    alignas(4) float mcCurrent;
    alignas(1) uint8_t lapNumber;
};
static_assert(sizeof(TSData_t) == 96, "struct size mismatch");

static inline const TSData_t *TSData__const_ptr_add(const TSData_t *p, size_t i) { return p + i; }
static inline TSData_t *TSData__ptr_add(TSData_t *p, size_t i) { return p + i; }
static inline TSData_struct_t TSData_vec_at(TSData_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t TSData__size(void) { return 96; }
static inline size_t TSData_vec_len(TSData_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(TSData)

__flatbuffers_define_struct_scalar_field(TSData, isEmergency, flatbuffers_bool, flatbuffers_bool_t)
__flatbuffers_define_struct_scalar_field(TSData, isEmergencyButtonPressed, flatbuffers_bool, flatbuffers_bool_t)
__flatbuffers_define_struct_scalar_field(TSData, isEmergencySwitchToggled, flatbuffers_bool, flatbuffers_bool_t)
__flatbuffers_define_struct_scalar_field(TSData, isHydrogenLeaking, flatbuffers_bool, flatbuffers_bool_t)
__flatbuffers_define_struct_scalar_field(TSData, isScRelayClosed, flatbuffers_bool, flatbuffers_bool_t)
__flatbuffers_define_struct_scalar_field(TSData, isTimeResetButtonPressed, flatbuffers_bool, flatbuffers_bool_t)
__flatbuffers_define_struct_scalar_field(TSData, isHalfSpeedButtonPressed, flatbuffers_bool, flatbuffers_bool_t)
__flatbuffers_define_struct_scalar_field(TSData, isGasButtonPressed, flatbuffers_bool, flatbuffers_bool_t)
__flatbuffers_define_struct_scalar_field(TSData, fuelCellMode, FuelCellMode, FuelCellMode_enum_t)
__flatbuffers_define_struct_scalar_field(TSData, fcCurrent, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, fcScCurrent, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, scMotorCurrent, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, fcVoltage, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, scVoltage, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, hydrogenSensorVoltage, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, fuelCellTemperature, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, fanRpm, flatbuffers_int32, int32_t)
__flatbuffers_define_struct_scalar_field(TSData, vehicleSpeed, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, motorPwm, flatbuffers_int32, int32_t)
__flatbuffers_define_struct_scalar_field(TSData, hydrogenPressure, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, gpsLatitude, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, gpsLongitude, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, gpsAltitude, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, gpsSpeed, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, motorSpeed, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, motorCurrent, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, fcCurrentRaw, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, fcVoltageRaw, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, mcCurrent, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(TSData, lapNumber, flatbuffers_uint8, uint8_t)



#include "flatcc/flatcc_epilogue.h"
#endif /* TELEMETRY-DATA_READER_H */
